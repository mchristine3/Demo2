/*  NAME: Kris Flatt & Grace Ford
    COURSE: EENG 350 C
    ASSIGNMENT: Demo 1
    FileName: Two wheels with encoder
    Last Modified: 13 April 2021

    Description:

    Circuit Set-up: The motor has 6 wires for input/output control, you can consult the documentation for
    the motor used in this assignment here: https://www.pololu.com/product/2824. For the Arduino, the most important
    pins for the motor are the Yellow and White wires, they are Channel A and B of the encoder respectively. Make sure
    those are connected to the proper I/O pins on the Arduino. The Green and Blue wires connect to Ground and 5V on the
    Arduino respectively. For this assignment, the Red and Black wires are the +7.2 volts and ground of the battery to
    the motor. Mode description on the wiring of the circuit can be found here: https://www.pololu.com/docs/0J55/3.c

    PIN ASSIGNMENTS on the Arduino
    D2 - External Interrupt for Right Motor (Right Motor Channel A)
    D3 - External Interrupt for Left Motor (Left Motor Channel A)
    D4 - Fault Check
    D5 - Right Motor Channel B
    D6 - Left Motor Channel B
    D7 - Left Motor Voltage
    D8 - Right Motor Voltage
    D9 - Left Motor Direction
    D10 - Right Motor Direction
    D12 - Status Flag (Fault)

    Motor Cable Bus Color Code
    Yellow - Channel A

    White - Channel B
    Blue - V_cc or V_dd (5 Volts)
    Green - GND
    Red - Motor(+)
    Black - Motor(-)

    Documentation:
    I received help from the following people and sources:
    https://forum.arduino.cc/index.php?topic=288234.0   Simple example on Serial.read()
    https://www.pololu.com/product/2824                 Data sheet for the motor
    https://www.pololu.com/docs/0J55/3.c                Data sheet and connections for the motor and Arduino
    http://www.pjrc.com/teensy/td_libs_Encoder.html     Link to download Encoder.h library, crucial for this program
*/

/* Encoder Library - Basic Example
   http://www.pjrc.com/teensy/td_libs_Encoder.html
   Download the library Encoder.h from here for this program to execute
   This example code is in the public domain.
*/

#include <Encoder.h>

// Change these two numbers to the pins connected to your encoder.
//   Best Performance: both pins have interrupt capability
//   Good Performance: only the first pin has interrupt capability
//   Low Performance:  neither pin has interrupt capability
Encoder rightWheel(2, 5);
Encoder leftWheel(3, 6);
//   avoid using pins with LEDs attached

#define enable 4            // This is the enable pin, turning both motors on/off
#define right_voltageSign 8    // this you can set this pin either HIGH (CW spin) or LOW (CCW spin) using a digitalWrite()
#define right_analogPin 10     // set the speed of rotation by setting the PWM value (0-255)
#define left_voltageSign 7
#define left_analogPin 9

const long count_per_rev = 3200;                    // number of counts per revolution using Encoder.h file
const float pi = 3.14159;                           // value of pi to 5 decimal places
const int sample_rate = 50;                         // sampling time of the main program in milliseconds
const float pwm_per_volt = 40;                 // ratio of pwm(255) to motor voltage(7.2)

const float wheel_radius = 3;                        // 7.29 centimeters
const float wheel_dist = 11.625;                       // 29.5275 centimeters
float wheel_circumference = 2 * pi * wheel_radius;      // wheel circumference in inches

long newRight;
long newLeft;

float radian_per_count = (float) (2.0 * pi) / count_per_rev;
float radian_desired = 0.0;
float left_radian_actual = 0.0;
float right_radian_actual = 0.0;
float left_radian_per_second = 0.0;
float right_radian_per_second = 0.0;

int count = 0;

float current_time = 0.0;

int left_pwmNum = 0;
int right_pwmNum = 0;
int left_spin_dir;
int right_spin_dir;

float left_radian_old = 0.0;
float right_radian_old = 0.0;
int case_num;

// RHO VARIABLES
float rho_desired = 0.0;
float rho_actual = 0.0;
float rho_error = 0.0;
float V_a_bar = 0.0;
float delta_V_a = 0.0;
float rho_dot_desired = 0.0;
float rho_dot_actual = 0.0;
float rho_dot_error = 0.0;
float V_a_right = 0.0;
float V_a_left = 0.0;
float max_rho_dot = 350.0;
float rho_dot_integral = 0.0;
float encoder_distance = 0;

float rho_kp = .6; //.7
float rho_dot_ki = 2.1; //2.1 //1.8 best
float rho_dot_kp = 0.25; //0.25

// PHI VARIABLES
float phi_dot_desired = 0.0;
float phi_dot_actual = 0.0;
float phi_dot_error = 0.0;
float phi_dot_integral = 0.0;
float max_phi_dot = 350.0;
float phi_desired = 0.0;
float phi_actual = 0.0;
float phi_error = 0.0;
float mod_kp = 1;

float phi_dot_kp = 0.0; //0.0
float phi_dot_ki = 1.5; //1.5
float phi_kp = .45; //.45

//outloop var
float old_encoder_right = 0.0;
float old_encoder_left = 0.0;
float new_encoder_right = 0.0;
float new_encoder_left = 0.0;
float right_error = 0.0;
float left_error = 0.0;

float right_count = 0.0;
float left_count = 0.0;

String inputString;
bool stringComplete;

float input_distance;
float input_angle;

long oldRight = -999;                 // part of encoder.h, leave these alone
long oldLeft = -999;

String data;
float distance = 0.0;
float angle = 0.0;
int time_counts;
bool skiploop;
int countloops = 0;

unsigned long totalMillis  = 0;
const long time_to_circle = 200000;
//int time_counts = 0;

//-------------------------------------------------------------------------------------------------------
void setup() {
  Serial.begin(9600);
  pinMode(enable, OUTPUT);
  pinMode(left_voltageSign, OUTPUT);
  pinMode(right_voltageSign, OUTPUT);
  pinMode(left_analogPin, OUTPUT);
  pinMode(right_analogPin, OUTPUT);
  pinMode(12, INPUT);
  digitalWrite(enable, HIGH);
  //Serial.print("Setupcheck ");
}

void resetControl() {
  //Serial.print("Initalized ");
  rightWheel.write(0);
  leftWheel.write(0);
  radian_desired = 0.0;
  left_radian_actual = 0.0;
  right_radian_actual = 0.0;
  left_radian_per_second = 0.0;
  right_radian_per_second = 0.0;

  count = 0;

  current_time = 0.0;

  left_pwmNum = 0;
  right_pwmNum = 0;
  left_spin_dir;
  right_spin_dir;

  left_radian_old = 0.0;
  right_radian_old = 0.0;


  // RHO VARIABLES
  rho_desired = 0.0;
  rho_actual = 0.0;
  rho_error = 0.0;
  V_a_bar = 0.0;
  delta_V_a = 0.0;
  rho_dot_desired = 0.0;
  rho_dot_actual = 0.0;
  rho_dot_error = 0.0;
  V_a_right = 0.0;
  V_a_left = 0.0;
  max_rho_dot = 350.0;
  rho_dot_integral = 0.0;
  encoder_distance = 0;

  // PHI VARIABLES
  phi_dot_desired = 0.0;
  phi_dot_actual = 0.0;
  phi_dot_error = 0.0;
  phi_dot_integral = 0.0;
  max_phi_dot = 350.0;
  phi_desired = 0.0;
  phi_actual = 0.0;
  phi_error = 0.0;

  //outloop var
  old_encoder_right = 0.0;
  old_encoder_left = 0.0;
  new_encoder_right = 0.0;
  new_encoder_left = 0.0;
  right_error = 0.0;
  left_error = 0.0;

  right_count = 0.0;
  left_count = 0.0;
}


//float serialEvent() {
//  data = Serial.readStringUntil('\n');
//  datafloat = data.toFloat();
//  return datafloat;
//  Serial.println(data);
//}
//
//void recieveData(int byteCount) {
//  Serial.println("Recieving")
//  int z = 0;
//  while (Serial.availiable()){
//    dataFromPi[i] = Serial.read();
//  }
//
//}

void Rho_Phi_control(float dist_in, float ang_in) {
  if (skiploop == false) {
    countloops = 0;
  }
  else {
    countloops = 9;

  }

  while (countloops < 45) {
    // conversion from lateral distance in inches to distance in radians
    rho_desired = (dist_in / wheel_circumference) * 2 * pi; //desired

    // conversion from desired turn angle in degrees to  desired turn angle in radians
    phi_desired = ang_in * pi / 180;

    //beginning of time controlled loop
    long time_old = micros();
    int delta_t = 0;
    float micros_to_millis = 0.0;

    // calculation of the error between desired and actual position values (radians)
    rho_error = rho_desired - rho_actual;
    phi_error = phi_desired - phi_actual;

    //Hops out of code condition
    if (abs(rho_error) < 1 && abs(phi_error) < .1) {
      countloops += 1;
    }

    if (skiploop == true) {
      countloops += 1;
    }

    //If SEARCHNG 360 Degrees rotate very slow!
    if (ang_in == 720) {
      mod_kp = .067;//.064
    } else {
      mod_kp = 1;
    }


    // block going from a lateral and angular desired position, to a desired lateral and angular velocity
    if (rho_error > max_rho_dot) {
      rho_dot_desired = max_rho_dot;
    } else if (rho_error < -max_rho_dot) {
      rho_dot_desired = -max_rho_dot;
    }  else {
      rho_dot_desired = rho_error * rho_kp;
    }
    if (phi_error > max_phi_dot) {
      phi_dot_desired = max_phi_dot;
    } else if (phi_error < -max_phi_dot) {
      phi_dot_desired = -max_phi_dot;
    } else {
      phi_dot_desired = phi_error * phi_kp * mod_kp;
    }

    // error of lateral and angular velocity are desired - actual
    rho_dot_error = rho_dot_desired - rho_dot_actual;
    phi_dot_error = phi_dot_desired - phi_dot_actual;

    // setting old positional values for calculation on the change in position over time
    left_radian_old = left_radian_actual;
    right_radian_old = right_radian_actual;

    // rho and phi integral calculations: integral = integral + (error * sampling rate / 1000 (us/ms))
    rho_dot_integral = (float) rho_dot_integral + (rho_dot_error * sample_rate / 1000);
    phi_dot_integral = (float) phi_dot_integral + (phi_dot_error * sample_rate / 1000);
    V_a_bar = (float) (rho_dot_error * rho_dot_kp) + (rho_dot_integral * rho_dot_ki);
    delta_V_a = (float) (phi_dot_error * phi_dot_kp) + (phi_dot_integral * phi_dot_ki);

    //sending right voltages to wheels
    V_a_right = (V_a_bar + delta_V_a) / 2;
    V_a_left = (V_a_bar - delta_V_a) / 2;

    if (V_a_right > 5) {
      V_a_right = 5;
    } else if (V_a_right < -5) {
      V_a_right = -5;
    }
    if (V_a_left > 5) {
      V_a_left = 5;
    } else if (V_a_left < -5) {
      V_a_left = -5;
    }

    old_encoder_right  = new_encoder_right;
    old_encoder_left = new_encoder_left;
    new_encoder_right = rightWheel.read();
    new_encoder_left = -1 * leftWheel.read();
    right_error = new_encoder_right - old_encoder_right;
    left_error = new_encoder_left - old_encoder_left;

    right_count = right_count + right_error;
    left_count = left_count + left_error;

    if (dist_in != 0 && ang_in != 0) {

      if ( right_count < 20000) {
        //      Serial.print("\t in if  ");
        //      Serial.print("\t right_count ");
        //      Serial.print(right_count);
        //      Serial.print("\t left_count: ");
        //      Serial.println(left_count);
        old_encoder_right  = new_encoder_right;
        old_encoder_left = new_encoder_left;
        new_encoder_right = rightWheel.read();
        new_encoder_left = -1 * leftWheel.read();
        right_error = new_encoder_right - old_encoder_right;
        left_error = new_encoder_left - old_encoder_left;

        right_count = right_count + right_error;
        left_count = left_count + left_error;

        V_a_left = 2.56;
        V_a_right = 5;
      }
      else {
        V_a_left = 0;
        V_a_right = 0;
      }
    }

    //  Serial.print("\t Right Voltage: ");
    //  Serial.print(V_a_right);
    //  Serial.print("\t Left Voltage: ");
    //  Serial.println(V_a_left);

    if (V_a_right > 0) {
      digitalWrite(right_voltageSign, HIGH);
    }
    else {
      digitalWrite(right_voltageSign, LOW);
    }

    if (V_a_left > 0) {
      digitalWrite(left_voltageSign, HIGH);
    }
    else {
      digitalWrite(left_voltageSign, LOW);
    }

    right_pwmNum = V_a_right * pwm_per_volt;
    left_pwmNum = V_a_left * pwm_per_volt;

    // sending pwm and direction values to the left and right motors
    analogWrite(left_analogPin, abs(left_pwmNum));

    analogWrite(right_analogPin, abs(right_pwmNum));

    // reading positional values from the encoder
    newRight = rightWheel.read();
    newLeft = -1 * leftWheel.read();

    //converting encoder values to angular velocity
    right_radian_actual = newRight * radian_per_count;
    left_radian_actual = newLeft * radian_per_count;

    // change in angular position
    float delta_left_radian = left_radian_actual - left_radian_old;
    float delta_right_radian = right_radian_actual - right_radian_old;

    // angular velocity calculation on based on change in position over the change in time (sample rate / 1000 (ms/sec))
    right_radian_per_second = delta_right_radian / sample_rate * 1000;
    left_radian_per_second = delta_left_radian / sample_rate * 1000;

    //
    rho_dot_actual = ((right_radian_per_second + left_radian_per_second) / 2);
    phi_dot_actual =  wheel_radius * ((right_radian_per_second - left_radian_per_second) / wheel_dist);

    rho_actual = ((right_radian_actual + left_radian_actual) / 2);
    phi_actual =  wheel_radius * ((right_radian_actual - left_radian_actual) * (1 / wheel_dist));

    long time_now = micros();
    delta_t = time_now - time_old;
    current_time = time_now / 1E6;

    micros_to_millis = (float) delta_t / 1000.0;
    if (micros_to_millis > sample_rate) {
      Serial.println("ERROR: Loop time longer than sampling rate.");
    } else {
      delay(sample_rate - micros_to_millis);
    }
  }
}

void drive_circle() {

  long time_old = micros();
  int delta_t = 0;
  float micros_to_millis = 0.0;
  float pwm_per_volt = 51;

  phi_dot_desired = 5.0;//makes bigger //6.3
  rho_dot_desired = 14.9;//14.7

  rho_dot_ki = 2.1;
  rho_dot_kp = 0.7;
  phi_dot_kp = 1; //.7
  phi_dot_ki = 2.1;

  time_counts = 0;
  while (time_counts < 45) {//45
    rho_dot_error = rho_dot_desired - rho_dot_actual;
    phi_dot_error = phi_dot_desired - phi_dot_actual;

    // setting old positional values for calculation on the change in position over time
    left_radian_old = left_radian_actual;
    right_radian_old = right_radian_actual;

    // rho and phi integral calculations: integral = integral + (error * sampling rate / 1000 (us/ms))
    rho_dot_integral = (float) rho_dot_integral + (rho_dot_error * sample_rate / 1000);
    phi_dot_integral = (float) phi_dot_integral + (phi_dot_error * sample_rate / 1000);


    V_a_bar = (float) (rho_dot_error * rho_dot_kp) + (rho_dot_integral * rho_dot_ki);
    delta_V_a = (float) (phi_dot_error * phi_dot_kp) + (phi_dot_integral * phi_dot_ki);

    V_a_right = (V_a_bar + delta_V_a) / 2;
    V_a_left = (V_a_bar - delta_V_a) / 2;

    if (V_a_right > 5) {
      V_a_right = 5;
    } else if (V_a_right < -5) {
      V_a_right = -5;
    }
    if (V_a_left > 5) {
      V_a_left = 5;
    } else if (V_a_left < -5) {
      V_a_left = -5;
    }

    old_encoder_right  = new_encoder_right;
    old_encoder_left = new_encoder_left;
    new_encoder_right = rightWheel.read();
    new_encoder_left = -1 * leftWheel.read();
    right_error = new_encoder_right - old_encoder_right;
    left_error = new_encoder_left - old_encoder_left;

    right_count = right_count + right_error;
    left_count = left_count + left_error;

    if (V_a_right > 0) {
      digitalWrite(right_voltageSign, HIGH);
    }
    else {
      digitalWrite(right_voltageSign, LOW);
    }

    if (V_a_left > 0) {
      digitalWrite(left_voltageSign, HIGH);
    }
    else {
      digitalWrite(left_voltageSign, LOW);
    }

    right_pwmNum = V_a_right * pwm_per_volt;
    left_pwmNum = V_a_left * pwm_per_volt;

    analogWrite(left_analogPin, abs(left_pwmNum));

    analogWrite(right_analogPin, abs(right_pwmNum));

    // reading positional values from the encoder
    newRight = rightWheel.read();
    newLeft = -1 * leftWheel.read();

    //converting encoder values to angular velocity
    right_radian_actual = newRight * radian_per_count;
    left_radian_actual = newLeft * radian_per_count;

    // change in angular position
    float delta_left_radian = left_radian_actual - left_radian_old;
    float delta_right_radian = right_radian_actual - right_radian_old;

    right_radian_per_second = delta_right_radian / sample_rate * 1000;
    left_radian_per_second = delta_left_radian / sample_rate * 1000;

    rho_dot_actual = ((right_radian_per_second + left_radian_per_second) / 2);
    phi_dot_actual =  wheel_radius * ((right_radian_per_second - left_radian_per_second) / wheel_dist);

    time_counts += 1;
    long time_now = micros();
    delta_t = time_now - time_old;
    current_time = time_now / 1E6;



    micros_to_millis = (float) delta_t / 1000.0;
    if (micros_to_millis > sample_rate) {
      Serial.println("ERROR: Loop time longer than sampling rate.");
    } else {
      delay(sample_rate - micros_to_millis);
    }
    //currentMillis = millis();
    //}
    //rho_dot_desired = 0.0;
    //phi_dot_desired = 0.0;
    //digitalWrite(enable, LOW);
  }

  //analogWrite(left_analogPin, 0);
  // analogWrite(right_analogPin, 0);
  digitalWrite(enable, LOW);
}

void loop() {
  //Serial.print("loopcheck ");
  resetControl();
  //float pwm_per_volt = 35.416;
  //phi_dot_ki = 2.7;
  //phi_kp = 1.0;
  while (true) {
    case_num = 1;
    skiploop = true;
    //drive_circle(); //may need to make bigger 
    //Rho_Phi_control(0,90); option to make it turn 90 then search for 4 
    Rho_Phi_control(0, 720); //720

    if (Serial.available() > 0) {
      switch (case_num) {
        case 1: //STOP
          skiploop = false;
          data = Serial.readStringUntil('\n');
          data = data.toFloat();
          resetControl();
          Rho_Phi_control(0.0, 0.0);
          data = "";
          Serial.println('2');
          case_num = 2;


        case 2: // turn and me coward
          data = Serial.readStringUntil('\n');
          angle = data.toFloat();
          //Serial.print("You Sent me: ");
          //Serial.println(angle);
          //Serial.println(angle);
          //ANGLE 4 < 10 needs to be adjusted 
          //test 2 runs over //test 1 doesnt get far enough distance 
          //test 1 could be fast at the end 
          resetControl();
          if (0 < abs(angle) && abs(angle) < 5) { //giving us errors for longer range 
            phi_dot_ki = 2 ;
            phi_kp = 2;
            Rho_Phi_control(0.0, 0.0);
          }
          else if (4 < abs(angle) && abs(angle) < 10) { //adjust nice but thats too long 
            phi_dot_ki = 3.2; // 3.4
            phi_kp = 1.1; //.65
            float pwm_per_volt = 35.416;
            Rho_Phi_control(0.0, -angle);
          }
          else if (9 < abs(angle) && abs(angle) < 22.5) { 
            phi_dot_ki = 3.2;//3.2 //2.7 /1
            phi_kp = 1.1; //.65 //1.1 w 3.2
            float pwm_per_volt = 35.416;
            Rho_Phi_control(0.0, -angle);
          }
          else {
            phi_dot_ki = 1.5;
            phi_kp = .45;
            Rho_Phi_control(0.0, -angle);
          }
          //Rho_Phi_control(0.0, 720);
          float pwm_per_volt = 51;
          phi_dot_ki = 1.5;
          phi_kp = .45;
          data = "";
          Serial.println('3');
          case_num = 3;


        case 3: //goin for a drive
          //can stop faster if we have time to adjust values 
          
          //while (Serial.available() == 0) {}
          data = Serial.readStringUntil('\n');
          distance = data.toFloat();
          distance = (distance - 9);
          //Serial.print("You Sent me: ");
          //Serial.println(distance);
          resetControl();
          
          phi_dot_ki = 3.8; //1.5
          phi_kp = .45; //.45
          rho_kp = .5; //.6
          rho_dot_ki = 2.1; //2.1 //1.8 best
          rho_dot_kp = 0.27; //0.25 
          //rightWheel.write(0);
          //leftWheel.write(0);
          Rho_Phi_control(distance, 0.0);
          case_num = 4;


        case 4: // turn before circle
          delay(100);
          resetControl();
          //rightWheel.write(0);
          //leftWheel.write(0);

          phi_dot_ki = 3.8; //1.5
          phi_kp = .85; //.45
          rho_kp = .6; //.6
          rho_dot_ki = 2.1; //2.1 //1.8 best
          rho_dot_kp = 0.25; //0.25
          
          Rho_Phi_control(0.0, -90.0);
          case_num = 5;


        case 5: // drive in a circle
          delay(100);
          resetControl();
          drive_circle();
          case_num = 6;

        case 6: // STOP EVERYTHING
          resetControl();
          while (true) {
            Rho_Phi_control(0.0, 0.0);
          }
      }
    }
  }
}

